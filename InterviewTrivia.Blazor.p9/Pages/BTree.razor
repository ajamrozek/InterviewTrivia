@page "/btree"
@using InterviewTrivia.BlazorApp.p9.Data
@using Blazor.Extensions.Canvas
@inject IJSRuntime Js

<style>
    .tree {
        position: relative;
        padding-top: 5px;
    }

    .node {
        height: 25px;
        width: 25px;
        background-color: #bbb;
        border-radius: 50%;
        padding-top:3px;
        font-size:small;
        display: inline-block;
        position: absolute;
        text-align: center;
        z-index:100;
    }

    .treeEdge {
        stroke: rgb(255,0,0);
        stroke-width: 2;
    }

    #linesSvg {
        display: inline-block;
        position: absolute;
    }
</style>



<h1>AVL Tree</h1>
Input String
<input type="text" value="@model.InString"
       @onchange="((e) => { model.InString = e.Value.ToString(); })" />
<button @onclick="(() => Submit())">Reset</button>


@if (model.NodeElements != null)
{
    @tree.Root.Value
    @NodeFragment
}




@code {
    BTreeModel model = new BTreeModel() { InString = "41,94,36,	-26,-14,76,	61,	12,	-91,-89,-4,	18,	-28,-93,-44,-91,65,	21,	-20,73,	-5,	100,-43,79" };
    AVLTree tree;
    string inArray;
    private RenderFragment NodeFragment;
    int treeHeight;
    int nodeSize = 30;

    protected override async Task OnInitializedAsync()
    {
    }


    private void Submit()
    {
        var inArray = model.InString
            .Split(new char[] { ',' })
            .Select(x => Convert.ToInt32(x));

        ResetTree(inArray);

    }

    void ResetTree(IEnumerable<int> inArray)
    {
        tree = new AVLTree(inArray);
        treeHeight = tree.GetHeight();

        BuildNodeElements();
        this.StateHasChanged();
    }

    void BuildNodeElements()
    {
        model.NodeElements = new List<NodeElement>();
        AddNodeElement(tree.Root);
        var linesStringBuilder = new System.Text.StringBuilder();
        List<LineModel> lineModels = new List<LineModel>();
        List<ElementReference> nodeRefs = new List<ElementReference>();

        var minLeft = model.NodeElements.Min(nodeEl => nodeEl.Left);
        var maxLeft = model.NodeElements.Max(nodeEl => nodeEl.Left);

        NodeFragment = builder =>
        {
            builder.OpenElement(1, "div");
            builder.AddAttribute(1, "class", "tree");
            builder.AddAttribute(2, "style", $"left:{System.Math.Abs(minLeft)}px");
            builder.AddAttribute(3, "width", $"{maxLeft - minLeft}px");

            foreach (var nodeElement in model.NodeElements)
            {
                builder.OpenElement(3, "span");
                builder.AddAttribute(1, "style", nodeElement.PositionStyle);
                builder.AddAttribute(2, "class", "node");
                if (nodeElement.Parent != null)
                {
                    builder.AddAttribute(3, "title", $"parent: {nodeElement.Parent.Value}");

                    builder.AddAttribute(4, "parent", nodeElement.Parent.Value);
                }

                builder.AddElementReferenceCapture(4, r => nodeRefs.Add(r));
                builder.AddContent(1, nodeElement.Value);
                builder.CloseElement();

                if (nodeElement.Parent != null)
                {
                    var isParentSrc = nodeElement.Parent.Value > nodeElement.Value;
                    var srcTopOffset = isParentSrc ? 0 : 10;
                    var destTopOffset = isParentSrc ? 10: 0;
                    var leftOffset = 12;

                    var src = nodeElement.Parent.Value > nodeElement.Value ? nodeElement : nodeElement.Parent;
                    var dest = nodeElement.Parent.Value < nodeElement.Value ? nodeElement : nodeElement.Parent;
                    lineModels.Add(new LineModel()
                    {
                        Source = new[] { src.Top + srcTopOffset, src.Left + Math.Abs(minLeft) + leftOffset },
                        Destination = new[] { dest.Top + destTopOffset, dest.Left + Math.Abs(minLeft) + leftOffset }
                    });
                }
            }

            builder.OpenElement(2, "svg");
            builder.AddAttribute(1, "id", "linesSvg");
            builder.AddAttribute(2, "style", $"left:{minLeft}px");
            builder.AddAttribute(3, "width", $"{maxLeft - minLeft + 30}px");

            builder.OpenComponent(1, typeof(InterviewTrivia.BlazorApp.p9.Pages.TreeEdge));
            builder.AddAttribute(1, "LineModels", lineModels);
            builder.AddAttribute(2, "NodeRefs", nodeRefs);
            builder.CloseComponent();

            builder.CloseElement();

            builder.CloseElement();
        };
    }

    void AddNodeElement(Node currentNode, int depthOffset = 0, NodeElement? parent = null, int parentLeftPos = 0, int polarity = 1)
    {
        if (currentNode != null)
        {
            var exponent = treeHeight - depthOffset + 1;
            var leftPos = depthOffset == 0 ? 0 :
                Convert.ToInt32((polarity * Math.Pow(exponent, 2) * nodeSize)) + parentLeftPos;
            var styleResult = $"top:{depthOffset * 30}px;left:{leftPos}px";

            var currentNodeElement = new NodeElement()
            {
                PositionStyle = styleResult,
                Value = currentNode.Value,
                Parent = parent,
                Top = depthOffset * 30,
                Left = leftPos
            };

            ((List<NodeElement>)model.NodeElements)
                .Add(currentNodeElement);

            AddNodeElement(currentNode.Left, depthOffset + 1, currentNodeElement, leftPos, -1);
            AddNodeElement(currentNode.Right, depthOffset + 1, currentNodeElement, leftPos);
        }
    }

}
